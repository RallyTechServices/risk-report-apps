<!DOCTYPE html>
<html>
<head>
    <title>Risk Story Status by Team</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Mon Sep 07 2015 07:54:02 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Sep 07 2015 07:54:02 GMT-0600 (MDT)";
        var CHECKSUM = 15722943484;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('Rally.technicalservices.RiskToolbox',{
    singleton: true,

    riskField: 'c_SecurityBusinessRisk',
    riskValue: 'High',
    riskRegex: 'Business risk: High',

    isRisk: function(r){

        var description = r.get('Description'),
            is_risk = false,
            risk_regex = new RegExp(this.riskRegex,"gi");

        if (risk_regex.test(description)){
            is_risk = true;
        }

        if (r.get(this.riskField) == this.riskValue){
            is_risk = true;
        }
        return is_risk;
    }
});

Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    getSettingAsArray: function(setting){
        var setting_as_array = setting || [];
        if (!(setting_as_array instanceof Array)){
            setting_as_array = setting_as_array.split(',');
        }
        return setting_as_array;
    },
    populateTimeHash: function(startTime, endTime, granularity, key_format, records, date_field){
        var hash = Rally.technicalservices.Toolbox.initializeTimeHash(startTime, endTime,granularity,key_format);
         _.each(records, function(r){
             var date_value = r.get(date_field);

            if (date_value){
                if (date_value < startTime){
                    date_value = startTime;
                }
                var date_key = Rally.technicalservices.Toolbox.getTimeHashKey(date_value,key_format);
                if (hash[date_key]){
                    hash[date_key].push(r);
                }
            }
        });
        return hash;
    },
    getTimeCategories: function(startTime, endTime, granularity, key_format){
        if (isNaN(Date.parse(startTime)) || isNaN(Date.parse(endTime))){
            return [];
        }
        if (!Ext.Array.contains(['month','day'],granularity)){
            return [];
        }
        var diff = Rally.util.DateTime.getDifference(endTime, startTime, granularity),
            categories = [];

        if (diff == 0){
            categories.push(Rally.technicalservices.Toolbox.getTimeHashKey(startTime, key_format));
            categories.push(Rally.technicalservices.Toolbox.getTimeHashKey(endTime, key_format));
            return categories;
        }

        if (diff < 0){
            var temp = startTime;
            startTime = endTime;
            endTime = temp;
        }

        var current_time = startTime;
        while (current_time < endTime){
            categories.push(Rally.technicalservices.Toolbox.getTimeHashKey(current_time,key_format));
            current_time = Rally.util.DateTime.add(current_time, granularity, 1);
        }
        return categories;
    },

    initializeTimeHash: function(startTime, endTime, granularity, key_format){
        var categories = Rally.technicalservices.Toolbox.getTimeCategories(startTime, endTime, granularity, key_format);
        if (categories.length == 0){
            return {};
        }
        return Rally.technicalservices.Toolbox.initializeArrayHash(categories);
    },
    initializeArrayHash: function(categories){
        var hash = {};
        _.each(categories, function(key){
            hash[key] = [];
        });
        return hash;
    },
    getTimeHashKey: function(date, key_format){
        if (!isNaN(Date.parse(date))){
            return Rally.util.DateTime.format(date, key_format);
        }
        return null;
    },
    getCumulativeSumFromTimeHash: function(hash, categories){
        //First sort, then add.
        var sums = _.map(_.range(categories.length), function(){return 0;}),
            total_sum = 0,
            idx = 0;

        _.each(categories, function(key){
            if (hash[key]){
                total_sum += hash[key].length;
            }
            sums[idx++] = total_sum;
        });
        return sums;
    },
    getCategories: function(records, category_field, attribute){
        var categories = [];
        _.each(records, function(r){
            var field_value = Rally.technicalservices.Toolbox._getFieldValue(r,category_field, attribute);
            if (field_value && !Ext.Array.contains(categories,field_value)){
                categories.push(field_value);
            }
        });
        return categories;
    },
    aggregateRecordsByCategory: function(categories, records, category_field, category_attribute){
        var hash = Rally.technicalservices.Toolbox.initializeArrayHash(categories);
        _.each(records, function(r){
            var field = Rally.technicalservices.Toolbox._getFieldValue(r,category_field, category_attribute);
            if (hash[field]){
                hash[field].push(r);
            }
        });
        return hash;
    },
    _getFieldValue: function(record, field, attribute){
        var val = record.get(field) || null;
        if (val && attribute){
            return val[attribute];
        }
        return val;
    },
    getSeriesForFieldValueCount: function(hash, categories, field, field_value){
        var series = [];
        _.each(categories, function(c){
            var recs = hash[c],
                count = 0;
            if (recs && recs.length > 0){
                _.each(recs, function(r){
                    if (r.get(field) == field_value){
                        count++;
                    }
                });
            }
            series.push(count);
        });
        return series;
    },
    aggregateRecordsByField: function(records, field, field_attribute){
        var aggregate_hash = {};

        _.each(records, function(r){
            var field_value = r.get(field);

            if (field_attribute){
                field_value = field_value[field_attribute];
            }

            if (field_value){
                if (!aggregate_hash[field_value]){
                    aggregate_hash[field_value] = [];
                }
                aggregate_hash[field_value].push(r);
            }
        });
        return aggregate_hash;
    }
});

Ext.define('Rally.technicalservices.WsapiToolbox',{
   // logger: new Rally.technicalservices.Logger(),
    singleton: true,
    fetchLeafProjectsInScope: function(project_ref){
        var deferred = Ext.create('Deft.Deferred');

        Rally.technicalservices.WsapiToolbox.fetchProjectTree(project_ref).then({
            success: function(project_tree){
                var leaves = Rally.technicalservices.WsapiToolbox._getLeaves(project_tree);
                deferred.resolve(leaves);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });

        return deferred;
    },
    _getAll: function(tree){
        var leaves = [];

        if (!Ext.isArray(tree)){
            tree = [tree];
        }
        _.each(tree, function(t){
            leaves.push(t);
            leaves = Ext.Array.merge(leaves, Rally.technicalservices.WsapiToolbox._getAll(t.get('Children')));

        });
        return leaves;
    },
    _getLeaves: function(tree){
        var leaves = [];

        if (!Ext.isArray(tree)){
            tree = [tree];
        }
        _.each(tree, function(t){
            if (t.get('Children').length == 0){
                leaves.push(t);
            } else {
                leaves = Ext.Array.merge(leaves, Rally.technicalservices.WsapiToolbox._getLeaves(t.get('Children')));
            }
        });
        return leaves;
    },
    fetchProjectTree: function(current_ref){
        var deferred = Ext.create('Deft.Deferred');

        var fetch = ['ObjectID','Name','Parent'];

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Project',
            fetch: fetch
        });

        store.load({
            scope: this,
            callback: function(records, operation, success){
                if (success){
                    var project_tree = Rally.technicalservices.WsapiToolbox._getTreeArray(records, current_ref);
                    deferred.resolve(project_tree);
                } else {
                    deferred.resolve('Error fetching projects: ' + operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    _getTreeArray:function(records, currentProjectRef) {

        var projectHash = {};
        _.each(records, function(rec){
            projectHash[rec.get('ObjectID')] = rec;
        });
        var current_root = null;

        var root_array = [];
        Ext.Object.each(projectHash, function(oid,item){

            if ( !item.get('Children') ) { item.set('Children',[]); }
            var direct_parent = item.get('Parent');
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {

                var parent_oid =  direct_parent.ObjectID || direct_parent.get('ObjectID');
                if (!projectHash[parent_oid]) {
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = projectHash[parent_oid];

                    if ( !parent.get('Children') ) { parent.set('Children',[]); }
                    var kids = parent.get('Children');
                    kids.push(item);
                    parent.set('Children',kids);
                }
            }
            var regex = new RegExp(item.get('_ref'));
            if (regex.test(currentProjectRef)){
                current_root = item;
            }

        },this);
        return current_root;
    },
    fetchScheduleStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore({sort: {property: 'Ordinal', direction: 'ASC'}}).load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = _.map(records, function(r){return r.get('StringValue')});
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },
    fetchDoneStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = [];
                            for (var i=records.length - 1; i > 0; i--){
                                values.push(records[i].get('StringValue'));
                                if (records[i].get('StringValue') == "Accepted"){
                                    i = 0;
                                }
                            }
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },

    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');

        config.limit = config.limit || 'Infinity';
        config.pageSize = config.pageSize || 200;
        config.sort = config.sort || [{
                property: 'ObjectID',
                direction: 'DESC'
            }];
        config.filters = config.filters || [];

        Ext.create('Rally.data.wsapi.Store', config).load({
            scope: this,
            callback : function(records, operation, success) {
             //   this.logger.log('fetchWsapiRecords success-->', success, ' operation-->', operation, ' records', records)
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format('Error loading Store (Model = {0}, Fetch = {1}: {2}',config.model, config.fetch.join(','), operation.error.errors.join(',')));
                }
            }
        });
        return deferred.promise;
    },
    fetchPreferences: function(appId){
        var deferred = Ext.create('Deft.Deferred');

        if (appId){
            Rally.data.PreferenceManager.load({
                appID: appId,
                success: function(prefs) {
                    deferred.resolve(prefs);
                }
            });
        } else {
            deferred.resolve([]);
        }

        return deferred.promise;
    },
    fetchWsapiCount: function(model, query_filters){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: query_filters,
            limit: 1,
            pageSize: 1
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    }
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    readmeUrl: "https://github.com/RallyTechServices/risk-report-apps/blob/master/risk-stories-by-team-and-state/README.md",
    codeUrl: "https://github.com/RallyTechServices/risk-report-apps/tree/master/risk-stories-by-team-and-state/deploy",
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    _getInformationalHtml: function(){
        var html = '';

        if (this.informationHtml){
            html += this.informationHtml + '<br/><br/>';
        }

        if (this.readmeUrl){
            html += Ext.String.format("For details about the data in this app, please refer to the <a href=\"{0}\" target=\"_blank\">README file</a>.<br/><br/>", this.readmeUrl);
        }

        if (this.codeUrl){
            html += Ext.String.format("Get the code <a href=\"{0}\" target=\"_blank\">here.</a><br/><br/>", this.codeUrl);
        }
        return html;
    },
    beforeRender: function() {
        var me = this,
            informational_html = this._getInformationalHtml();
        this.callParent(arguments);

        if (informational_html && informational_html.length > 0) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: informational_html
            });
        }

        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });

        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("risk-stories-by-team-and-state", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    autoScroll: false,
    states: ['Defined','In-Progress','Completed','Accepted'],
    config: {
        defaultSettings: {
            tagsOfInterest: [],
            combineCompletedAccepted: true
        }
    },


    launch: function(){
        this._validateSettings();
    },
    _validateSettings: function(){
        var tags = Rally.technicalservices.Toolbox.getSettingAsArray(this.getSetting('tagsOfInterest'));

        if (this.down('#display_box')){
            this.down('#display_box').destroy();
        }

        this.completedStates =  _.rest(this.states, _.indexOf(this.states,"Accepted"));
        if (this.getSetting('combineCompletedAccepted') == 'true' || this.getSetting('combineCompletedAccepted') === true){
            this.completedStates = _.rest(this.states, _.indexOf(this.states,"Completed"));
        }

        this.logger.log('_validateSettings > tags', tags);
        if (tags.length > 0){
            this.add({
                xtype: 'container',
                itemId: 'display_box',
                width: '95%'
            });
            Rally.technicalservices.WsapiToolbox.fetchScheduleStates().then({
                scope: this,
                success: function(states){
                    this.states = states;
                    this._fetchStories(tags);
                }
            });
        } else {
            this.add({
                xtype: 'container',
                itemId: 'display_box',
                html: 'No tags have been configured.  Please use the App Settings to configure at least one tag of interest.'
            });
        }
    },

    _fetchStories: function(tags){
        var me = this,
            tag_filter_objs = [];

        _.each(tags, function(tag){
            tag_filter_objs.push({
                property: 'Tags',
                operator: '=',
                value: tag
            });
        });

        var filters = Rally.data.wsapi.Filter.or(tag_filter_objs);

        this.logger.log('_fetchStories > filters', filters.toString());

        var fetch = ['FormattedID','ObjectID','Project','Description','ScheduleState','Name'],
            model = 'HierarchicalRequirement';

        Rally.technicalservices.WsapiToolbox.fetchWsapiRecords({model: model, fetch: fetch, filters: filters}).then({
            scope: this,
            success: function(records){
                this.logger.log('_fetchStories > records loaded', records.length);

                var filtered_records = this._filterRecords(records);

                this._buildGrid(filtered_records);
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
            }
        }).always(function(){ me.setLoading(false);});
    },
    _filterRecords: function(records){
        var filtered_records = [];
        _.each(records, function(r){
            if (Rally.technicalservices.RiskToolbox.isRisk(r)){
                filtered_records.push(r);
            }
        }, this);
        return filtered_records;
    },
    _buildGrid: function(records){

        var tagged_stories_by_project = Rally.technicalservices.Toolbox.aggregateRecordsByField(records, "Project","Name");

        this.logger.log('_buildGrid', tagged_stories_by_project);
        var data = [];

        var states = this.states;
        _.each(tagged_stories_by_project, function(rec, project){
            var tagged_story_array = tagged_stories_by_project[project] || [];

            var tagged_stories_by_state = Rally.technicalservices.Toolbox.aggregateRecordsByField(tagged_story_array, "ScheduleState");
            var data_row = {
                project: project,
                tagged: tagged_story_array.length
            };
            _.each(states, function(state){
                var state_array = tagged_stories_by_state[state] || [];
                data_row[state] = state_array.length;
            });
            data.push(data_row);
        });

        if (this.down('#storygrid')){
            this.down('#storygrid').destroy();
        }
        this.add({
            xtype: 'rallygrid',
            itemId: 'storygrid',
            store: Ext.create('Rally.data.custom.Store',{
                data: data,
                pageSize: data.length
            }),
            margin: 10,
            padding: 10,
            showPagingToolbar: false,
            scroll: 'vertical',
            columnCfgs: this._getColumnCfgs()
        });

    },
    _getColumnCfgs: function(){
        var cols = [{
            dataIndex: 'project',
            text: 'Team',
            flex: 1
        }];

        _.each(this.states, function(state){
            if (!Ext.Array.contains(this.completedStates,state)){
                cols.push({
                    dataIndex: state,
                    text:  state
                });
            }
        }, this);

        var completed_text = "Accepted";
        if (Ext.Array.contains(this.completedStates, "Completed")){
            completed_text = "Completed / Accepted";
        }

        cols.push({
            dataIndex: "Accepted",
            text: completed_text,
            scope: this,
            renderer: this._completedTotalRenderer
        });

        cols.push({
            dataIndex: 'tagged',
            text: 'Total High Risk'
        });

        cols.push({
            dataIndex: "Accepted",
            text: "% Completion",
            scope: this,
            renderer: this._completedPercentRenderer
        });

        return cols;
    },
    _completedPercentRenderer: function(v,m,r){
        var tagged = r.get('tagged') || 0;
        if (tagged > 0){
            var completed_total = 0;
            _.each(this.completedStates, function(state){
                completed_total += (r.get(state) || 0);
            });
            return Ext.String.format('{0} %', (completed_total/tagged * 100).toFixed(0));
        }
        return '0 %';
    },
    _completedTotalRenderer: function(v,m,r){
        var completed_total = 0;
        _.each(this.completedStates, function(state){
            completed_total += (r.get(state) || 0);
        });
        return completed_total;
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    getSettingsFields: function(){
        return [{
            xtype: 'rallytagpicker',
            name: 'tagsOfInterest',
            fieldLabel: 'Tags',
            labelWidth: 150,
            width: 400
        }];
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this._validateSettings();
    }
});
            
               Rally.launchApp('risk-stories-by-team-and-state', {
                   name: 'Risk Story Status by Team'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>